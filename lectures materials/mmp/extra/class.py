import math

class Geometre:
    # Атрибути класу (спільні для всіх об'єктів цього класу) Викликаються при іморті класу (до ініціалізації обєкту класу)
    color = "Green"        # Публічний атрибут (доступний всюди)
    min_val = 0            # Мінімальне значення для сторін
    max_val = 100          # Максимальне значення для сторін

# Тип       | Приставка|     Доступ             |	    Для чого використовується
# Публічний	|    color |   Всюди	            |   Загальні дані, які можна змінювати
# Захищений	|    _color|   В класі та підкласах |	Дані, які не бажано змінювати ззовні
# Приватний |  	 __x   |   Лише всередині класу	|   Повністю приховані критичні дані

    def __init__(self, x, y, z):
        # Приватні атрибути (доступ лише всередині класу через створення: _Geometre__x)
        self.__x = self.__y = self.__z = 0  # Приватні сторони трикутника

        # Захищені атрибути (доступні в класі та підкласах — не повністю приватні, але не рекомендується напряму ззовні)
        self._color = "Green"     # Колір фігури
        self._name = "Default"    # Назва фігури

        # Валідація: перевіряє, чи всі значення в допустимому діапазоні
        if self.chek(x) and self.chek(y) and self.chek(z):
            self.__x = x
            self.__y = y
            self.__z = z
        else:
            print("Значення не проходять перевірку.")

    # Метод класу — працює з атрибутами класу через cls. Може будет викликаний без ініціалізації обєкту класу.
    @classmethod
    def chek(cls, arg):
        if cls.min_val <= arg <= cls.max_val:
            print(f"Ваше значення {arg} входить в діапазон.")
            return True
        else:
            print(f"Перезапустіть і введіть значення {arg} в діапазоні від 0 до 100.")
            return False

    # Статичний метод — не має доступу ні до self, ні до cls. Зручно до використання всередині класу для деяких підрахунків
    @staticmethod
    def __calculate_area(x, y, z):
        # Приватний метод — викликається лише всередині класу
        # Формула Герона для обчислення площі трикутника
        p = (x + y + z) / 2
        return math.sqrt(p * (p - x) * (p - y) * (p - z))

    # Публічний метод — обчислює площу, використовуючи приватний метод
    def get_area(self):
        return Geometre.__calculate_area(self.__x, self.__y, self.__z) # could be self.__calculate_area

    # Сетер для захищеного атрибута _color. Для модифікації протектид данних публічний метод
    def set_color(self, color):
        if color:
            self._color = color
        else:
            print("Колір не може бути порожнім.")

    # Гетер для атрибута _color. Для доступу до захищених полів
    def get_color(self):
        return self._color

    @property
    def color(self):
        return self._color + ' '

    # Сетер для _name (з валідацією)
    def set_name(self, name):
        if name:
            self._name = name
        else:
            print("Ім'я не може бути порожнім.")

    # Гетер для _name
    def get_name(self):
        return self._name

    # Публічний метод для виведення всієї інформації про об'єкт
    def display_info(self):
        print(f"Геометрична фігура: {self._name}")
        print(f"Колір: {self._color}")
        print(f"Координати: x = {self.__x}, y = {self.__y}, z = {self.__z}")
        print(f"Площа трикутника: {self.get_area()}")


# Створюєм об'єкт класу
cor1 = Geometre(20, 12, 30)
cor1.display_info()  


cor1.set_color("Red")
cor1.set_name("Triangle")


cor1.display_info()


# У коді створюємо клас Geometre який рахує площу геометричної фігури трикутника
# Для початку імпотртували math для того щоб порухвати формулу Герона 
# Також маємо атрибути такі як color  за замовчуванням зелений 
# min_val і max_val, що задають допустимий діапазон значень для координат (від 0 до 100).
# Усередині класу визначено конструктор __init__, який приймає три аргументи — x, y і z.
# Це довжини сторін трикутника. У цьому методі спершу створюються атрибути: координати (__x, __y, __z) як приватні
# які недоступні напряму ззовні; а також _color та _name як захищені атрибути, які не рекомендовано змінювати напряму
# Далі за допомогою методу chek перевіряється, чи кожне з переданих значень знаходиться в межах допустимого діапазону. 
# Якщо всі значення дійсні, то вони зберігаються в приватні змінні. Якщо хоч одне значення не відповідає вимогам, виводиться повідомлення про помилку, і координати залишаються нульовими.
# __calculate_area, який не прив’язаний до конкретного екземпляра. Він отримує три сторони трикутника, обчислює півпериметр p, а потім за формулою Герона обчислює площу і повертає її.
# Щоб викликати цей приватний метод, використовується публічний метод get_area, який звертається до __calculate_area і передає йому поточні координати трикутника.
# Для доступу та зміни кольору фігури реалізовані методи set_color і get_color. Метод set_color перевіряє, щоб колір не був порожнім, перш ніж змінити _color. Аналогічно,
#  методи set_name і get_name дозволяють встановлювати або отримувати назву фігури, перевіряючи на непорожнє значення.
# Метод display_info виводить на екран усю основну інформацію про об'єкт: його назву, колір, координати та площу. Для демонстрації роботи класу створюється об’єкт cor1, передаючи йому сторони 20, 12 і 30. 
# Конструктор перевіряє значення, зберігає їх і обчислює площу. Потім викликається метод display_info, який виводить усю інформацію. 
# Далі за допомогою методів set_color і set_name змінюється колір фігури на червоний і встановлюється назва "Triangle". Після цього знову викликається display_info, який вже показує оновлені дані.

# І пфдбиваючи підсумки, цей клас ілюструє основні принципи об’єктно-орієнтованого програмування в Python: інкапсуляцію, використання класових,
#  статичних і приватних методів, а також контроль доступу до атрибутів через геттери та сеттери.
